{"version":3,"sources":["firebase/config.js","comps/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","comps/Title.js","comps/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","App.js","index.js"],"names":["firebase","initializeApp","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snapshot","documents","forEach","doc","push","data","id","ImageGrid","setChosenImage","console","log","className","map","key","onClick","url","style","cursor","src","alt","Modal","chosenImage","event","target","classList","contains","Title","useStorage","file","progress","setProgress","error","setError","setUrl","fileRefernce","ref","name","collectionReference","put","on","percentageUploaded","bytesTransferred","totalBytes","err","a","getDownloadURL","retreivedURL","add","createdAt","ProgressBar","setFile","width","UploadForm","typesArray","type","onChange","e","uploadedThing","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.505ffed2.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore();\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport { projectFirestore, projectStorage, timestamp };\n","import { useState, useEffect } from 'react';\nimport { projectFirestore } from '../firebase/config';\n\nfunction useFirestore(collection) {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unsub = projectFirestore\n      .collection(collection)\n      .orderBy('createdAt', 'desc')\n      .onSnapshot((snapshot) => {\n        let documents = [];\n        snapshot.forEach((doc) => {\n          documents.push({ ...doc.data(), id: doc.id });\n        });\n        setDocs(documents);\n      });\n\n    return () => unsub();\n  }, [collection]);\n\n  return { docs };\n}\n\nexport default useFirestore;\n","// cycles through database and outputs each image using link in database\nimport React from 'react';\nimport useFirestore from './useFirestore';\n\nfunction ImageGrid({ setChosenImage }) {\n  const { docs } = useFirestore('images');\n  console.log(docs);\n\n  return (\n    <div className='img-grid'>\n      {docs &&\n        docs.map((doc) => (\n          <div\n            className='img-wrap'\n            key={doc.id}\n            onClick={() => setChosenImage(doc.url)}\n            style={{ cursor: 'pointer' }}\n          >\n            <img src={doc.url} alt='uploaded pic' />\n          </div>\n        ))}\n    </div>\n  );\n}\n\nexport default ImageGrid;\n","import React from 'react';\n\nfunction Modal({ chosenImage, setChosenImage }) {\n  function handleImgExit(event) {\n    if (event.target.classList.contains('backdrop')) {\n      setChosenImage(null);\n    }\n  }\n\n  return (\n    <div className='backdrop' onClick={handleImgExit}>\n      <img src={chosenImage} alt='bigger image' />\n    </div>\n  );\n}\n\nexport default Modal;\n","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className='title'>\n      <h1>Snipp</h1>\n      <h2>Your Pictures</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  );\n};\n\nexport default Title;\n","// takes image from ProgressBar, which gets it passed as a prop from UploadForm, and throws it into the storage and the database (when ofcourse, the hook is used in ProgressBar)\n\nimport { useState, useEffect } from 'react';\nimport {\n  projectStorage,\n  projectFirestore,\n  timestamp,\n} from '../firebase/config';\n\nfunction useStorage(file) {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  useEffect(() => {\n    const fileRefernce = projectStorage.ref(file.name);\n    const collectionReference = projectFirestore.collection('images');\n\n    // the \"on\" listener fires functions when certain events happen\n    // event is 'state_changed', second argument is the FX that fires when said state changes, third argument is a FX that fires if there's an error, and last argument is a FX that fires when upload is complete\n    fileRefernce.put(file).on(\n      'state_changed',\n      (snapshot) => {\n        let percentageUploaded =\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        setProgress(percentageUploaded);\n      },\n      (err) => {\n        setError(err);\n      },\n      async () => {\n        const retreivedURL = await fileRefernce.getDownloadURL();\n        collectionReference.add({ url: retreivedURL, createdAt: timestamp() });\n        setUrl(retreivedURL);\n      }\n    );\n  }, [file]);\n\n  return { progress, url, error };\n}\n\nexport default useStorage;\n","import React, { useEffect } from 'react';\nimport useStorage from './useStorage';\n\nfunction ProgressBar({ file, setFile }) {\n  const { url, progress } = useStorage(file);\n  console.log(progress, url);\n\n  useEffect(() => {\n    if (url) {\n      setFile(null);\n    }\n  }, [url, setFile]);\n\n  return <div className='progress-bar' style={{ width: progress + '%' }}></div>;\n}\n\nexport default ProgressBar;\n","import React, { useState } from 'react';\nimport ProgressBar from './ProgressBar';\n\nfunction UploadForm() {\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState(null);\n\n  const typesArray = ['image/png', 'image/jpeg'];\n\n  function handleInputChange(e) {\n    let uploadedThing = e.target.files[0];\n    console.log(uploadedThing);\n\n    if (uploadedThing && typesArray.includes(uploadedThing.type)) {\n      setFile(uploadedThing);\n      setError(null);\n    } else {\n      setError('Please upload an image file (png or jpeg)');\n      setFile(null);\n    }\n  }\n\n  return (\n    <form>\n      <label>\n        <input type='file' onChange={handleInputChange} />\n        <span>+</span>\n      </label>\n      <div className='output'>\n        {file && <div> {file.name} </div>}\n        {error && <div className='error'> {error}</div>}\n        {file && <ProgressBar file={file} setFile={setFile} />}\n      </div>\n    </form>\n  );\n}\n\nexport default UploadForm;\n","import React, { useState } from 'react';\nimport ImageGrid from './comps/ImageGrid';\nimport Modal from './comps/Modal';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\n\nfunction App() {\n  const [chosenImage, setChosenImage] = useState(null);\n\n  return (\n    <div className='App'>\n      <Title />\n      <UploadForm />\n      <ImageGrid setChosenImage={setChosenImage} />\n      {chosenImage && (\n        <Modal chosenImage={chosenImage} setChosenImage={setChosenImage} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}